apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

//---------------------- Versioning
def getVersionProperty(String variableName, int defaultValue) {
    def versioningPropsFile = rootProject.file('versioning.properties')
    if (versioningPropsFile.canRead()) {
        def versioningProps = new Properties()
        versioningProps.load(versioningPropsFile.newDataInputStream())

        String propertiesVariable = versioningProps[variableName]
        if (propertiesVariable != null) {
            return Integer.parseInt(propertiesVariable)
        } else {
            return defaultValue
        }
    } else {
        throw new GradleException("Could not read versioning.properties!, make sure file is present")
    }
}

def getVersionMajor() {
    return getVersionProperty('VERSION_MAJOR', 1)
}

def getVersionMinor() {
    return getVersionProperty('VERSION_MINOR', 0)
}

def getVersionPatch() {
    return getVersionProperty('VERSION_PATCH', 0)
}

def generateVersionCode() {
    return MINIMUM_SDK_VERSION.toInteger() * 10000000 + getVersionMajor() * 10000 + getVersionMinor() * 100 + getVersionPatch()
}

def generateVersionName() {
    return "${getVersionMajor()}.${getVersionMinor()}.${getVersionPatch()}"
}

task version {
    group 'food4needy'
    description 'generates the VersionCode and VersionName for the app'
    doLast {
        println "Current version:"
        println "Version code: ${generateVersionCode()}"
        println "Version name: ${generateVersionName()}"
    }
}

//--------------------- Signing
def mSigningProps = new Properties()
def signingPropsFile = rootProject.file('signing.properties')
if (signingPropsFile.canRead()) {
    mSigningProps.load(signingPropsFile.newDataInputStream())
} else {
    throw new GradleException("Could not read signing.properties!, make sure file is present")
}

task releasePassword {
    group 'food4needy'
    description 'Reads the KeyStore Password for the app release'
    doLast {
        println "Store Password: ${mSigningProps['STORE_PASSWORD']}"
        println "Key Password: ${mSigningProps['KEY_PASSWORD']}"
    }
}

android {
    buildToolsVersion BUILD_TOOLS_VERSION
    compileSdkVersion COMPILE_SDK_VERSION.toInteger()
    signingConfigs {
        release {
            storeFile rootProject.file('food4needy-release.jks')
            storePassword mSigningProps['STORE_PASSWORD']
            keyAlias mSigningProps['KEY_ALIAS']
            keyPassword mSigningProps['KEY_PASSWORD']
        }
    }
    defaultConfig {
        applicationId "com.allow.food4needy"
        minSdkVersion MINIMUM_SDK_VERSION.toInteger()
        targetSdkVersion TARGET_SDK_VERSION.toInteger()
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        resConfigs "en"

        multiDexEnabled true

        resValue "string", "places_api_key", "AIzaSyASZ6GhBVpOumaBLIh-mUKJLkv2ATWgBVU"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "Food4Needy-${variant.name}-${generateVersionName()}.apk"
        }

        variant.getCompileConfiguration().resolutionStrategy {
            force 'com.android.support:customtabs:28.0.0-alpha1'
        }
        variant.runtimeConfiguration.resolutionStrategy {
            force 'com.android.support:customtabs:28.0.0-alpha1'
        }
        variant.getAnnotationProcessorConfiguration().resolutionStrategy {
            force 'com.android.support:customtabs:28.0.0-alpha1'
        }
    }
    testVariants.all { variant ->
        variant.getCompileConfiguration().exclude group: 'com.android.support', module: 'customtabs'
        variant.getRuntimeConfiguration().exclude group: 'com.android.support', module: 'customtabs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.android.support:appcompat-v7:28.0.0-alpha1'
    implementation 'com.android.support:support-v4:28.0.0-alpha1'
    implementation 'com.android.support:cardview-v7:28.0.0-alpha1'
    implementation 'com.android.support:design:28.0.0-alpha1'
    implementation 'com.android.support:support-dynamic-animation:28.0.0-alpha1'
    implementation 'com.android.support:support-vector-drawable:28.0.0-alpha1'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.google.dagger:dagger:2.15'
    kapt "com.google.dagger:dagger-compiler:2.15"
    implementation 'com.google.dagger:dagger-android:2.15'
    kapt 'com.google.dagger:dagger-android-processor:2.15'
    implementation 'com.google.dagger:dagger-android-support:2.15'

    implementation 'com.github.bumptech.glide:glide:4.7.1'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'

    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.firebaseui:firebase-ui-auth:4.0.1'
    implementation 'com.firebaseui:firebase-ui-database:4.0.1'
    implementation 'com.firebaseui:firebase-ui-storage:4.0.1'
    implementation 'com.google.firebase:firebase-config:16.0.0'

    implementation 'com.firebase:geofire-android:2.3.1'

    implementation 'com.google.code.gson:gson:2.8.4'

    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'android.arch.lifecycle:viewmodel:1.1.1'
    implementation 'android.arch.lifecycle:livedata:1.1.1'
    kapt "android.arch.lifecycle:compiler:1.1.1"

    implementation 'com.google.android.gms:play-services-places:15.0.1'
    implementation 'com.google.android.gms:play-services-location:15.0.1'

    implementation 'pub.devrel:easypermissions:1.2.0'

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.4'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
}

apply plugin: 'com.google.gms.google-services'
